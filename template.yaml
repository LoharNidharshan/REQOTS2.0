AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  REQO

  Sample SAM Template for REQO

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 10
    Environment:
      Variables:
        TABLE_NAME: !Ref MyTable

    Tracing: Active
    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON
  Api:
    TracingEnabled: true
Resources:
  MyProductsAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        DefaultAuthorizer: MyLambdaTokenAuthorizer
        Authorizers:
          MyLambdaTokenAuthorizer:
            FunctionArn: !GetAtt MyAuthFunction.Arn
  
  MyAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./authorizer/dist
      Handler: authorizer.handler
      Runtime: nodejs18.x

  MyCompanyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: companyApp.create
      Runtime: nodejs20.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MyTable
      Events:
        GetRoot:
          Type: Api
          Properties:
            RestApiId: !Ref MyProductsAPI
            Path: /companies
            Method: post

  MyUsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: userApp.create
      Runtime: nodejs20.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MyTable
      Events:
        GetRoot:
          Type: Api
          Properties:
            RestApiId: !Ref MyProductsAPI
            Path: /users
            Method: post

  MyCategoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: categoryApp.create
      Runtime: nodejs20.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MyTable
      Events:
        GetRoot:
          Type: Api
          Properties:
            RestApiId: !Ref MyProductsAPI
            Path: /categories
            Method: post

  MyItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: itemApp.create
      Runtime: nodejs20.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MyTable
      Events:
        GetRoot:
          Type: Api
          Properties:
            RestApiId: !Ref MyProductsAPI
            Path: /items
            Method: post

  MyTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: reqoTable
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S  # S for String, N for Number, B for Binary
        - AttributeName: SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH  # Partition key
        - AttributeName: SK
          KeyType: RANGE # Sort key
      BillingMode: PAY_PER_REQUEST
      # Optionally, you can define ProvisionedThroughput if you're not using PAY_PER_REQUEST
      # ProvisionedThroughput:
      #   ReadCapacityUnits: 5
      #   WriteCapacityUnits: 5


